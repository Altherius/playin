openapi: 3.0.0
info:
  title: 'Playin API'
  version: '0.5'
servers:
  -
    url: 'http://localhost'
    description: 'Local development environment'
  -
    url: 'https://api-dev.play-in.com'
    description: 'Development environment'
  -
    url: 'https://api-preprod.play-in.com'
    description: 'Staging environment'
  -
    url: 'https://api.play-in.com'
    description: 'Production environment'
paths:
  '/api/addresses/{id}':
    get:
      tags:
        - Address
      summary: 'Get address'
      operationId: de6419a46a2f3639437add4f3cb76e5d
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the address'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The requested address'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Address' }
                type: object
    put:
      tags:
        - Address
      summary: 'Update address'
      operationId: 2f078db19c8d7e5a374faa4b048e4c45
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the address'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/AddressCreateRequest'
      responses:
        '200':
          description: 'The created address'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Address' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Address
      summary: 'Delete address'
      operationId: 3380f49103f9fb0f4a126d324894a33a
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the address'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Address has been deleted successfully'
  '/api/users/{user}/addresses':
    post:
      tags:
        - Address
      summary: 'Create address bound to user'
      operationId: 432904700dcf3769da1410790dfe81cf
      parameters:
        -
          name: user
          in: path
          description: 'The ID of the user'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/AddressCreateRequest'
      responses:
        '201':
          description: 'The created address'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Address' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/orders/{order}/addresses':
    post:
      tags:
        - Address
      summary: 'Create address bound to order'
      operationId: 5f12a631132269c358412b282fcd87bb
      parameters:
        -
          name: order
          in: path
          description: 'The ID of the order'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/AddressCreateRequest'
      responses:
        '201':
          description: 'The created address'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Address' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/stocks/{stock}/addresses':
    post:
      tags:
        - Address
      summary: 'Create address bound to stock'
      operationId: 4b93eb1686f65b7319f98e06df50d020
      parameters:
        -
          name: stock
          in: path
          description: 'The ID of the stock'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/AddressCreateRequest'
      responses:
        '201':
          description: 'The created address'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Address' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/token:
    post:
      tags:
        - Auth
      summary: 'Get JWT'
      operationId: c256a83f2449d1a9665cf619d5ef7ef6
      requestBody:
        $ref: '#/components/requestBodies/TokenRequest'
      responses:
        '200':
          description: 'The requested token'
          content:
            application/json:
              schema:
                properties:
                  token: { description: 'A JWT to use for authentication', type: string }
                type: object
        '401':
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/card-releases:
    get:
      tags:
        - 'Card Release'
      summary: 'Get collection of card releases'
      operationId: 65a2aa14f2c6933ac6a5f6c5fd5702a1
      responses:
        '200':
          description: 'A paginated collection of card releases'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardReleasePaginatedCollection'
  '/api/card-releases/{id}':
    get:
      tags:
        - 'Card Release'
      summary: 'Get card release'
      operationId: 17d1dcdefa4e8a891da4bf80d6645cea
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the card release'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required card release'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/CardRelease' }
                type: object
        '404':
          description: 'No card release has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/categories:
    get:
      tags:
        - Category
      summary: 'Get collection of categories'
      operationId: 3f5817a34833d0a1f4af4548dd3aeaba
      responses:
        '200':
          description: 'A paginated collection of categories'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPaginatedCollection'
    post:
      tags:
        - Category
      summary: 'Create category'
      operationId: 71fcad552bb0eaba9fb191fd8d8dcab0
      requestBody:
        $ref: '#/components/requestBodies/CategoryCreateRequest'
      responses:
        '201':
          description: 'The created category'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Category' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/categories/{id}':
    get:
      tags:
        - Category
      summary: 'Get category'
      operationId: c68e76d323c008827a9e47398b1583de
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the category'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required category'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Category' }
                type: object
        '404':
          description: 'No category has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Category
      summary: 'Update category'
      operationId: 0e686b2748211cc688333ed705dc111f
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the category'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/CategoryUpdateRequest'
      responses:
        '200':
          description: 'The created category'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Category' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Category
      summary: 'Delete category'
      operationId: 4c12e22a7f8c617bd83bfa1fdc05428d
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the category'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Category has been deleted successfully'
  /api/events:
    get:
      tags:
        - Event
      summary: 'Get collection of events'
      operationId: 7058ab7c89d20c752b6afd6d808f6526
      responses:
        '200':
          description: 'A paginated collection of events'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPaginatedCollection'
    post:
      tags:
        - Event
      summary: 'Create event'
      operationId: 508895e03d7f10edac84357084c87b20
      requestBody:
        $ref: '#/components/requestBodies/EventCreateRequest'
      responses:
        '201':
          description: 'The created event'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Event' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/stores/{store}/upcoming-events':
    get:
      tags:
        - Event
      summary: 'Get collection of upcoming events at a store'
      operationId: 383e8357a336d6fba59024bb75cf3aa0
      parameters:
        -
          name: store
          in: path
          description: 'The store where the upcoming events occur'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'A paginated collection of upcoming events at the given store'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPaginatedCollection'
  '/api/events/{id}':
    get:
      tags:
        - Event
      summary: 'Get event'
      operationId: 6f743f71f7a88dbe57be1d9c9ebf47cb
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the event'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required event'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Event' }
                type: object
        '404':
          description: 'No event has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Event
      summary: 'Update event'
      operationId: fb130dcf1ab4d7abbd3a173741df1f8f
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the event'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/EventCreateRequest'
      responses:
        '200':
          description: 'The updated event'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Event' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/gift-cards:
    get:
      tags:
        - 'Gift Card'
      summary: 'Get collection of gift cards'
      operationId: a040aa33c5e3caa36a51ad5cf7077067
      responses:
        '200':
          description: 'A paginated collection of gift cards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardPaginatedCollection'
    post:
      tags:
        - 'Gift Card'
      summary: 'Create gift card'
      operationId: 685943a8b07df0410b2bbaa6458ca214
      requestBody:
        $ref: '#/components/requestBodies/GiftCardCreateRequest'
      responses:
        '201':
          description: 'The created gift card'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/GiftCard' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/gift-cards/{giftCard}/activate':
    post:
      tags:
        - 'Gift Card'
      summary: 'Activate gift card'
      operationId: 95a8645b95eb2b1c45d4097e6c20ad1a
      parameters:
        -
          name: giftCard
          in: path
          description: 'The ID of the gift card to activate'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The activated gift card'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/GiftCard' }
                type: object
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/gift-cards/{giftCard}/consume':
    post:
      tags:
        - 'Gift Card'
      summary: 'Consume gift card'
      operationId: 37d2a4f8fd70673af62322c2cd5273c1
      parameters:
        -
          name: giftCard
          in: path
          description: 'The ID of the gift card to consume'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The cnosumed gift card'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/GiftCard' }
                type: object
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/gift-cards/{id}':
    get:
      tags:
        - 'Gift Card'
      summary: 'Get gift card'
      operationId: bdac0989dcd8956f0b7cf89c66ff6deb
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the gift card'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required gift card'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/GiftCard' }
                type: object
        '404':
          description: 'No gift card has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - 'Gift Card'
      summary: 'Update gift card'
      operationId: 02e7732f9d20b3e157a97350a29f4954
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the gift card'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/GiftCardUpdateRequest'
      responses:
        '200':
          description: 'The updated gift card'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/GiftCard' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/orders:
    get:
      tags:
        - Order
      summary: 'Get collection of orders'
      operationId: 2cd7e03021e72d9d799c12dfe179c865
      responses:
        '200':
          description: 'A paginated collection of orders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPaginatedCollection'
    post:
      tags:
        - Order
      summary: 'Create order'
      operationId: d690d6834318e9b064df441e854de8b9
      requestBody:
        $ref: '#/components/requestBodies/OrderCreateRequest'
      responses:
        '201':
          description: 'The created order'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Order' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/orders/{id}':
    get:
      tags:
        - Order
      summary: 'Get order'
      operationId: c29621029e70f65247909d3e09031118
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the order'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required order'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Order' }
                type: object
        '404':
          description: 'No order has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Order
      summary: 'Update order'
      operationId: 6a7029f5510ca08e28a2d58a5fe19439
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the order'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/OrderUpdateRequest'
      responses:
        '200':
          description: 'The updated order'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Order' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order-items:
    post:
      tags:
        - 'Order Item'
      summary: 'Create order item'
      operationId: 3390f5f422c701c6e520cc66e9d18037
      requestBody:
        $ref: '#/components/requestBodies/OrderItemCreateRequest'
      responses:
        '201':
          description: 'The created order item'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/OrderItem' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/order-items/{id}':
    put:
      tags:
        - 'Order Item'
      summary: 'Update order item'
      operationId: c1778023c9a3ecbc744efb765d68415f
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the order item'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/OrderItemCreateRequest'
      responses:
        '200':
          description: 'The updated order item'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/OrderItem' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/products:
    get:
      tags:
        - Product
      summary: 'Get collection of products'
      operationId: 1bfaa78d1c2c3848ab8165c5dadcad3e
      responses:
        '200':
          description: 'A paginated collection of products'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPaginatedCollection'
    post:
      tags:
        - Product
      summary: 'Create product'
      operationId: e8185e307706e2cd84bbcf5171e2f09d
      requestBody:
        $ref: '#/components/requestBodies/ProductCreateRequest'
      responses:
        '201':
          description: 'The created product'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Product' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/products/{id}':
    get:
      tags:
        - Product
      summary: 'Get product'
      operationId: 7ab21ddb713501f3d4c2914892c02a21
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the product'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required product'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Product' }
                type: object
        '404':
          description: 'No product has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Product
      summary: 'Update product'
      operationId: 6a7e11900844cd85cff66e662b82bd4c
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the product'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/ProductCreateRequest'
      responses:
        '200':
          description: 'The updated product'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Product' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/registrations:
    get:
      tags:
        - Registration
      summary: 'Get collection of registrations'
      description: 'Display a listing of the resource.'
      operationId: db4ead8b25e0a7347b6f494e6294d73f
      responses:
        '200':
          description: 'A paginated collection of registrations'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationPaginatedCollection'
    post:
      tags:
        - Registration
      summary: 'Create registration'
      description: 'Store a newly created resource in storage.'
      operationId: 3456a8765de35ac860a6122c53e9e85f
      requestBody:
        $ref: '#/components/requestBodies/RegistrationCreateRequest'
      responses:
        '201':
          description: 'The created registration'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Registration' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/registrations/{id}':
    get:
      tags:
        - Registration
      summary: 'Get registration'
      operationId: db8f39f24d36fe90a2e3efff7f53b2dc
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the registration'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required registration'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Registration' }
                type: object
        '404':
          description: 'No registration has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Registration
      summary: 'Update registration'
      operationId: 933f1c604e08095d25638305ed7f31fb
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the registration'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/RegistrationUpdateRequest'
      responses:
        '200':
          description: 'The updated registration'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Registration' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Registration
      summary: 'Delete registration'
      operationId: 8b8dad40214e80330f2201fa85d726bd
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the registration'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Registration deleted successfully'
  /api/stocks:
    get:
      tags:
        - Stock
      summary: 'Get collection of stocks'
      operationId: d4033154f4154db037806c28dacaf51a
      responses:
        '200':
          description: 'A paginated collection of orders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPaginatedCollection'
    post:
      tags:
        - Stock
      summary: 'Create stock'
      operationId: bcd2af84da9c2ee170ade9d263efffb2
      requestBody:
        $ref: '#/components/requestBodies/StockCreateRequest'
      responses:
        '201':
          description: 'The created stock'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Stock' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/stocks/{id}':
    get:
      tags:
        - Stock
      summary: 'Get stock'
      operationId: 0eb5a79eb49e0c5a8c2585dbdfa94d99
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the stock'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required stock'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Stock' }
                type: object
        '404':
          description: 'No stock has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Stock
      summary: 'Update stock'
      operationId: 61a79aa0f6ad78b51856362b577c93b6
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the stock'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/StockUpdateRequest'
      responses:
        '200':
          description: 'The updated stock'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Stock' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/stock-items:
    post:
      tags:
        - 'Stock Item'
      summary: 'Create stock item'
      operationId: 47ed29a0fd34f7651e8d4ee04dcda04f
      requestBody:
        $ref: '#/components/requestBodies/StockItemCreateRequest'
      responses:
        '201':
          description: 'The created stock item'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/StockItem' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/stock-items/{id}':
    put:
      tags:
        - 'Stock Item'
      summary: 'Update stock item'
      operationId: f66ae89e0f14c5f487a0c556894eef56
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the stock item'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/StockItemCreateRequest'
      responses:
        '200':
          description: 'The updated stock item'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/StockItem' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/stores:
    get:
      tags:
        - Store
      summary: 'Get collection of stores'
      operationId: 789854b8f9730d47f1ba52ca5e610238
      responses:
        '200':
          description: 'A paginated collection of stores'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorePaginatedCollection'
    post:
      tags:
        - Store
      summary: 'Create store'
      operationId: 5562ee6fb25788924172167093719fe9
      requestBody:
        $ref: '#/components/requestBodies/StoreCreateRequest'
      responses:
        '201':
          description: 'The created store'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Store' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/stores/{id}':
    get:
      tags:
        - Store
      summary: 'Get store'
      operationId: cd24cde4c43f6c4aeb2ed9725fca9624
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the store'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required store'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Store' }
                type: object
        '404':
          description: 'No store has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Store
      summary: 'Update store'
      operationId: 88ff3f89a8f75ba1778135a219a7df23
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the store'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/StoreCreateRequest'
      responses:
        '200':
          description: 'The created store'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Store' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/store-credit-histories:
    get:
      tags:
        - 'Store Credit History'
      summary: 'Get collection of stock credit history entries'
      operationId: a681d6412a04944b910a0cb274490ae9
      responses:
        '200':
          description: 'A paginated collection of store credit history entries'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCreditHistoryPaginatedCollection'
  '/api/stores-credit-histories/{id}':
    get:
      tags:
        - 'Store Credit History'
      summary: 'Get store credit history entry'
      operationId: 16a72fccc14ff2153da790096b8435fa
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the entry'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required entry'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/StoreCreditHistory' }
                type: object
        '404':
          description: 'No entry has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/users/{user}/store-credit-history':
    get:
      tags:
        - 'Store Credit History'
      summary: 'Get user store credit history'
      operationId: d3ae22018e605f3213b130449bc1f928
      parameters:
        -
          name: user
          in: path
          description: 'The ID of the target user'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'A paginated collection of store credit history entries for the given user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCreditHistoryPaginatedCollection'
  /api/users:
    get:
      tags:
        - User
      summary: 'Get collection of users'
      operationId: c457726701591d1183b53aa71fc13441
      responses:
        '200':
          description: 'A paginated collection of users'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPaginatedCollection'
  '/api/users/{id}':
    get:
      tags:
        - User
      summary: 'Get user'
      operationId: 36a33ff774d5cba33c039dec2c3e0287
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the user'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required user'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '404':
          description: 'No user has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/me:
    get:
      tags:
        - User
      summary: 'Get currently logged in user'
      operationId: 4917cc84ad78f7572292b07e6fbe4bce
      responses:
        '200':
          description: 'The currently logged in user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 'User is not logged in'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    AddressEditInput:
      required:
        - address_name
        - recipient_name
        - street
        - postal_code
        - locality
        - country
      properties:
        address_name:
          description: 'A descriptive name of the address'
          type: string
          example: Home
          nullable: true
        recipient_name:
          description: 'The name of the person or service of the address'
          type: string
          example: 'John Doe'
          nullable: false
        street:
          description: 'The street address'
          type: string
          example: '1600 Amphitheatre Pkwy'
          nullable: false
        postal_code:
          description: 'The postal code'
          type: string
          example: '94043'
          nullable: false
        locality:
          description: 'The locality in which the street address is'
          type: string
          example: 'Mountain View'
          nullable: false
        country:
          description: 'The country'
          type: string
          example: USA
          nullable: false
      type: object
    TokenCreateInput:
      required:
        - email
        - password
        - device_name
      properties:
        email:
          description: 'The email of the user'
          type: string
          format: email
          nullable: false
        password:
          description: 'The plain password of the user'
          type: string
          example: secret
          nullable: false
        device_name:
          description: 'A descriptive name of the device linked to the token'
          type: string
          example: Laptop
          nullable: false
      type: object
    CategoryCreateInput:
      required:
        - name
        - category_id
      properties:
        name:
          description: 'The name of the category'
          type: string
          nullable: false
        category_id:
          description: 'The id of the parent category'
          type: string
          nullable: true
      type: object
    CategoryUpdateInput:
      required:
        - name
        - category_id
      properties:
        name:
          description: 'The name of the category'
          type: string
          nullable: false
        category_id:
          description: 'The id of the parent category'
          type: string
          nullable: true
      type: object
    EventEditInput:
      required:
        - name
        - store_id
        - start_time
        - end_time
        - max_capacity
        - price
      properties:
        name:
          description: 'The name of the event'
          type: string
          nullable: false
        store_id:
          description: 'The id of the managing store'
          type: integer
          nullable: false
        start_time:
          description: 'The time at which the event starts'
          type: string
          format: date-time
          nullable: false
        end_time:
          description: 'The time at which the event ends'
          type: string
          format: date-time
          nullable: false
        max_capacity:
          description: 'The maximum number of registrations'
          type: integer
          minimum: 0
          nullable: false
        price:
          description: 'The default registration price'
          type: number
          format: float
          nullable: false
      type: object
    GiftCardCreateInput:
      required:
        - barcode
        - value
      properties:
        barcode:
          description: 'The barcode of the gift card'
          type: string
          nullable: false
        value:
          description: 'The value of the gift card'
          type: number
          format: float
          nullable: false
      type: object
    GiftCardUpdateInput:
      required:
        - barcode
        - value
      properties:
        barcode:
          description: 'The barcode of the gift card'
          type: string
          nullable: false
        value:
          description: 'The value of the gift card'
          type: number
          format: float
          nullable: false
      type: object
    OrderCreateInput:
      required:
        - customer_id
        - store_id
      properties:
        customer_id:
          description: 'The customer linked to the order'
          type: integer
          nullable: false
        store_id:
          description: 'The store linked to the order'
          type: integer
          nullable: false
      type: object
    OrderUpdateInput:
      required:
        - validated
        - sent
        - received
        - payment_status
        - payment_mode
      properties:
        validated:
          description: 'Is the order validated?'
          type: boolean
          nullable: false
        sent:
          description: 'Is the order sent?'
          type: boolean
          nullable: false
        received:
          description: 'Is the order received?'
          type: boolean
          nullable: false
        payment_status:
          description: 'The payment status of the order'
          type: string
          enum:
            - awaiting_payment
            - processing_payment
            - payment_accepted
            - payment_rejected
          nullable: false
        payment_mode:
          description: 'The payment mode of the order'
          type: string
          enum:
            - cash
            - store_credit
            - paypal
          nullable: true
      type: object
    OrderItemEditInput:
      required:
        - order_id
        - product_id
        - unit_price
      properties:
        order_id:
          description: 'The order linked to the order item'
          type: integer
          nullable: false
        product_id:
          description: 'The product linked to the order item'
          type: integer
          nullable: false
        quantity:
          description: 'The quantity ordered'
          type: integer
          minimum: 1
          nullable: false
        unit_price:
          description: 'The unit price of the product in the order'
          type: number
          format: float
          minimum: 0
          nullable: false
      type: object
    ProductEditInput:
      required:
        - name
        - price
      properties:
        name:
          description: 'The name of the product'
          type: string
          nullable: false
        price:
          description: 'The default price of the product'
          type: number
          format: float
          minimum: 0
          nullable: false
      type: object
    RegistrationCreateInput:
      required:
        - event_id
        - user_id
      properties:
        event_id:
          $ref: '#/components/schemas/Event'
        user_id:
          $ref: '#/components/schemas/User'
      type: object
    RegistrationUpdateInput:
      required:
        - event_id
        - user_id
        - paid
      properties:
        event_id:
          $ref: '#/components/schemas/Event'
        user_id:
          $ref: '#/components/schemas/User'
        paid:
          description: 'Is the registration paid?'
          type: boolean
          nullable: false
      type: object
    StockCreateInput:
      required:
        - retailer_id
        - store_id
      properties:
        retailer_id:
          description: 'The retailer linked to the stock'
          type: integer
          nullable: false
        store_id:
          description: 'The store linked to the order'
          type: integer
          nullable: false
      type: object
    StockUpdateInput:
      required:
        - validated
        - sent
        - received
        - payment_status
        - payment_mode
      properties:
        validated:
          description: 'Is the order validated?'
          type: boolean
          nullable: false
        sent:
          description: 'Is the order sent?'
          type: boolean
          nullable: false
        received:
          description: 'Is the order received?'
          type: boolean
          nullable: false
        payment_status:
          description: 'The payment status of the order'
          type: string
          enum:
            - awaiting_payment
            - processing_payment
            - payment_accepted
            - payment_rejected
          nullable: false
        payment_mode:
          description: 'The payment mode of the order'
          type: string
          enum:
            - cash
            - store_credit
            - paypal
          nullable: true
      type: object
    StockItemEditInput:
      required:
        - stock_id
        - product_id
        - unit_price
      properties:
        stock_id:
          description: 'The stock linked to the stock item'
          type: integer
          nullable: false
        product_id:
          description: 'The product linked to the stock item'
          type: integer
          nullable: false
        quantity:
          description: 'The quantity ordered'
          type: integer
          minimum: 1
          nullable: false
        unit_price:
          description: 'The unit price of the product in the stock'
          type: number
          format: float
          minimum: 0
          nullable: false
      type: object
    StoreEditInput:
      required:
        - name
      properties:
        name:
          description: 'The name of the store'
          type: string
          nullable: false
      type: object
    Address:
      required:
        - id
        - address_name
        - recipient_name
        - street
        - postal_code
        - locality
        - country
        - links
      properties:
        id:
          description: 'The ID of the address'
          type: integer
          nullable: false
        address_name:
          description: 'A descriptive name of the address'
          type: string
          example: Home
          nullable: true
        recipient_name:
          description: 'The name of the person or service of the address'
          type: string
          example: 'John Doe'
          nullable: false
        street:
          description: 'The street address'
          type: string
          example: '1600 Amphitheatre Pkwy'
          nullable: false
        postal_code:
          description: 'The postal code'
          type: string
          example: '94043'
          nullable: false
        locality:
          description: 'The locality in which the street address is'
          type: string
          example: 'Mountain View'
          nullable: false
        country:
          description: 'The country'
          type: string
          example: USA
          nullable: false
        links:
          description: 'Links related to the address'
          required:
            - edit
          properties:
            edit:
              description: 'Link to edit the address'
              type: string
              format: url
          type: object
          nullable: false
      type: object
    BoardgameProperties:
      required:
        - id
        - min_player_count
        - max_player_count
        - min_player_age
        - max_player_age
        - game_length_minutes
      properties:
        id:
          description: 'The ID of the boardgame properties'
          type: integer
          nullable: false
        min_player_count:
          description: 'The minimal number of players required to play'
          type: integer
          minimum: 1
          nullable: false
        max_player_count:
          description: 'The maximal number of players who can play simultaneously'
          type: integer
          minimum: 1
          nullable: false
        min_player_age:
          description: 'The required age to play the game'
          type: integer
          minimum: 0
          nullable: false
        max_player_age:
          description: 'The maximal age to play the game'
          type: integer
          minimum: 0
          nullable: true
        game_length_minutes:
          description: 'An estimation of a game length, in minutes'
          type: integer
          minimum: 0
          nullable: true
      type: object
    CardEdition:
      required:
        - id
        - name
        - released_at
      properties:
        id:
          description: 'The ID of the card edition'
          type: integer
          nullable: false
        name:
          description: 'The name of the card edition'
          type: string
          example: 'Base Edition 2024'
          nullable: false
        released_at:
          description: 'The release date of the card edition'
          type: string
          format: date
          nullable: false
      type: object
    CardPrintState:
      required:
        - id
        - grading
        - language
      properties:
        id:
          description: 'The ID of the boardgame properties'
          type: integer
          nullable: false
        grading:
          description: 'The grading of the card'
          type: string
          enum:
            - NM
            - EX
            - PL
            - PO
          nullable: false
        language:
          description: 'The language the card is printed in'
          type: string
          enum:
            - FR
            - EN
            - DE
            - ES
            - PT
            - IT
            - RU
            - ZH-CN
            - ZH-HANT
            - JA
            - KO
          nullable: false
      type: object
    CardPropertiesFab:
      description: 'Card properties of a Flesh & Blood trading card'
      required:
        - name
        - resource_cost
        - pitch
        - type_line
        - rules_text
        - attack
        - defense
      properties:
        name:
          description: 'The name of the card'
          type: string
          nullable: false
        resource_cost:
          description: 'The resource cost of the card'
          type: integer
          nullable: false
        pitch:
          description: 'The pitch of the card'
          type: integer
          nullable: false
        type_line:
          description: 'The type line of the card'
          type: string
          nullable: false
        rules_text:
          description: 'The rules text of the card'
          type: string
          nullable: false
        attack:
          description: 'The attack of the card'
          type: integer
          nullable: true
        defense:
          description: 'The defense of the card'
          type: integer
          nullable: true
      type: object
    CardPropertiesLorcana:
      description: 'Card properties of a Lorcana trading card'
      required:
        - name
        - cost
        - can_be_ink
        - type_line
        - rules_text
        - power
        - toughness
        - lore
      properties:
        name:
          description: 'The name of the card'
          type: string
          nullable: false
        cost:
          description: 'The cost of the card'
          type: integer
          nullable: false
        can_be_ink:
          description: 'Can the card be played as ink?'
          type: boolean
          nullable: false
        type_line:
          description: 'The type line of the card'
          type: string
          nullable: false
        rules_text:
          description: 'The rules text of the card'
          type: string
          nullable: false
        attack:
          description: 'The attack of the card'
          type: integer
          nullable: true
        defense:
          description: 'The defense of the card'
          type: integer
          nullable: true
        lore:
          description: 'The lore value of the card'
          type: integer
          nullable: true
      type: object
    CardPropertiesMagic:
      description: 'Card properties of a Magic trading card'
      required:
        - id
        - name
        - mana_cost
        - type_line
        - rules_text
        - power
        - toughness
      properties:
        id:
          description: 'The ID of the card'
          type: integer
          nullable: false
        name:
          description: 'The name of the card'
          type: string
          nullable: false
        mana_cost:
          description: 'The encoded mana cost of the card'
          type: string
          nullable: true
        type_line:
          description: 'The type line of the card'
          type: string
          nullable: false
        rules_text:
          description: 'The rules text of the card'
          type: string
          nullable: false
        power:
          description: 'The power of the card'
          type: integer
          nullable: true
        toughness:
          description: 'The toughness of the card'
          type: integer
          nullable: true
      type: object
    CardPropertiesYugioh:
      description: 'Card properties of a Yu-Gi-Oh trading card'
      required:
        - name
        - level
        - type_line
        - rules_text
        - atk
        - def
      properties:
        name:
          description: 'The name of the card'
          type: string
          nullable: false
        level:
          description: 'The level of the card'
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
        type_line:
          description: 'The type line of the card'
          type: string
          nullable: false
        rules_text:
          description: 'The rules text of the card'
          type: string
          nullable: false
        atk:
          description: 'The attack of the card'
          type: integer
          minimum: 0
          nullable: true
        def:
          description: 'The defense of the card'
          type: integer
          minimum: 0
          nullable: true
      type: object
    CardRelease:
      required:
        - id
        - edition
        - collection_number
        - artist
      properties:
        id:
          description: 'The ID of the card release'
          type: integer
          nullable: false
        edition:
          $ref: '#/components/schemas/CardEdition'
        collection_number:
          description: 'A string identifying the card in the release'
          type: string
          example: '001'
          nullable: false
        artist:
          description: 'The artist who did the art of the card in the release'
          type: string
          example: 'John Doe'
          nullable: false
        products:
          description: 'The products linked to this card release'
          type: string
          nullable: false
      type: object
    Category:
      required:
        - id
        - name
        - parent
      properties:
        id:
          description: 'The ID of the category'
          type: integer
          nullable: false
        name:
          description: 'The name of the category'
          type: string
          example: Boosters
          nullable: false
        parent:
          oneOf:
            -
              $ref: '#/components/schemas/Category'
          nullable: true
          description: 'The mother category'
      type: object
    Event:
      required:
        - id
        - name
        - store
        - start_time
        - end_time
        - max_capacity
        - price
      properties:
        id:
          description: 'The ID of the event'
          type: integer
          nullable: false
        name:
          description: 'The name of the event'
          type: string
          example: 'PPTQ Modern'
          nullable: false
        store:
          $ref: '#/components/schemas/Store'
        start_time:
          description: 'The time at which the event starts'
          type: string
          format: date-time
          nullable: false
        end_time:
          description: 'The time at which the event ends'
          type: string
          format: date-time
          nullable: false
        max_capacity:
          description: 'The maximum number of registrations'
          type: integer
          minimum: 0
          nullable: false
        registrations_count:
          description: 'The current number of registrations'
          type: integer
          minimum: 0
          nullable: false
        price:
          description: 'The default registration price'
          type: number
          format: float
          minimum: 0
          nullable: false
        registrations:
          $ref: '#/components/schemas/Registration'
      type: object
    GiftCard:
      required:
        - id
        - barcode
        - value
        - status
      properties:
        id:
          description: 'The ID of the gift card'
          type: integer
          nullable: false
        barcode:
          description: 'The barcode of the gift card'
          type: string
          example: '0000000000000'
          nullable: false
        value:
          description: 'The value of the gift card'
          type: number
          format: float
          nullable: false
        status:
          description: 'The status of the gift card'
          type: string
          enum:
            - inactive
            - active
            - used
          nullable: false
      type: object
    OrderItem:
      required:
        - id
        - product
        - quantity
        - unit_price
      properties:
        id:
          description: 'The ID of the order item'
          type: integer
          nullable: false
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          description: 'The ordered quantity'
          type: integer
          minimum: 1
          nullable: false
        unit_price:
          description: 'The unit price of the product in the order'
          type: number
          format: float
          minimum: 0
          nullable: false
      type: object
    Order:
      required:
        - id
        - customer
        - validated
        - sent
        - received
        - payment_status
        - payment_mode
        - total_price
        - links
      properties:
        id:
          description: 'The ID of the order'
          type: integer
          nullable: false
        customer:
          $ref: '#/components/schemas/User'
        validated:
          description: 'Is the order validated?'
          type: boolean
          nullable: false
        sent:
          description: 'Is the order sent?'
          type: boolean
          nullable: false
        received:
          description: 'Is the order received?'
          type: boolean
          nullable: false
        payment_status:
          description: 'The payment status of the order'
          type: string
          enum:
            - awaiting_payment
            - processing_payment
            - payment_accepted
            - payment_rejected
          nullable: false
        payment_mode:
          description: 'The payment mode of the order'
          type: string
          enum:
            - cash
            - store_credit
            - paypal
          nullable: true
        total_price:
          description: 'The total price of the order'
          type: number
          format: float
          minimum: 0
          nullable: false
        items:
          description: 'The items in the order'
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          nullable: false
        address:
          oneOf:
            -
              $ref: '#/components/schemas/Address'
          nullable: true
          description: 'The address linked to the order'
        links:
          description: 'Links related to the order'
          required:
            - show
          properties:
            show:
              description: 'Link to show the order'
              type: string
              format: url
          type: object
          nullable: false
      type: object
    Product:
      required:
        - id
        - name
        - card_game
        - slug
        - price
        - links
      properties:
        id:
          description: 'The ID of the product'
          type: integer
          nullable: false
        name:
          description: 'The name of the product'
          type: string
          nullable: false
        card_game:
          description: 'The card game related to the product'
          type: string
          enum:
            - magic
            - yugioh
            - fab
            - lorcana
          nullable: false
        slug:
          description: 'The slug of the product'
          type: string
          nullable: false
        price:
          description: 'The default price of the product'
          type: number
          format: float
          minimum: 0
          nullable: false
        card_print_state:
          $ref: '#/components/schemas/CardPrintState'
        card_release:
          $ref: '#/components/schemas/CardRelease'
        card_properties:
          description: 'The card properties of the product, present only if the product is a card'
          nullable: false
          oneOf:
            -
              $ref: '#/components/schemas/CardPropertiesMagic'
            -
              $ref: '#/components/schemas/CardPropertiesYugioh'
            -
              $ref: '#/components/schemas/CardPropertiesFab'
            -
              $ref: '#/components/schemas/CardPropertiesLorcana'
        boardgame_properties:
          $ref: '#/components/schemas/BoardgameProperties'
        links:
          description: 'Links related to the product'
          properties:
            show:
              description: 'Link to show the product'
              type: string
              format: url
          type: object
          nullable: false
      type: object
    Registration:
      required:
        - id
        - user
        - event
        - paid
      properties:
        id:
          description: 'The ID of the registration'
          type: integer
          nullable: false
        user:
          $ref: '#/components/schemas/User'
        event:
          $ref: '#/components/schemas/Event'
        paid:
          description: 'Is the registration paid?'
          type: boolean
          nullable: false
      type: object
    StockItem:
      required:
        - id
        - product
        - quantity
        - unit_price
      properties:
        id:
          description: 'The ID of the stock item'
          type: integer
          nullable: false
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          description: 'The ordered quantity'
          type: integer
          minimum: 1
          nullable: false
        unit_price:
          description: 'The unit price of the product in the stock'
          type: number
          format: float
          minimum: 0
          nullable: false
      type: object
    Stock:
      required:
        - id
        - retailer
        - validated
        - sent
        - received
        - payment_status
        - payment_mode
        - total_price
        - links
      properties:
        id:
          description: 'The ID of the stock'
          type: integer
          nullable: false
        retailer:
          $ref: '#/components/schemas/User'
        validated:
          description: 'Is the stock validated?'
          type: boolean
          nullable: false
        sent:
          description: 'Is the stock sent?'
          type: boolean
          nullable: false
        received:
          description: 'Is the stock received?'
          type: boolean
          nullable: false
        payment_status:
          description: 'The payment status of the stock'
          type: string
          enum:
            - awaiting_payment
            - processing_payment
            - payment_accepted
            - payment_rejected
          nullable: false
        payment_mode:
          description: 'The payment mode of the stock'
          type: string
          enum:
            - cash
            - store_credit
            - paypal
          nullable: true
        total_price:
          description: 'The total price of the stock'
          type: number
          format: float
          minimum: 0
          nullable: false
        items:
          description: 'The items in the stock'
          type: array
          items:
            $ref: '#/components/schemas/StockItem'
          nullable: false
        address:
          oneOf:
            -
              $ref: '#/components/schemas/Address'
          nullable: true
          description: 'The address linked to the stock'
        links:
          description: 'Links related to the stock'
          required:
            - show
          properties:
            show:
              description: 'Link to show the stock'
              type: string
              format: url
          type: object
          nullable: false
      type: object
    StoreCreditHistory:
      required:
        - id
        - comment
        - credit
        - customer_id
        - collaborator_id
        - created_at
      properties:
        id:
          description: 'The ID of the store credit history entry'
          type: integer
          nullable: false
        comment:
          description: 'A comment describing the entry'
          type: string
          nullable: true
        credit:
          description: "The credit added to the customer's balance"
          type: number
          format: float
          nullable: false
        customer_id:
          description: 'The id of the customer tracked by the entry'
          type: integer
          nullable: false
        collaborator_id:
          description: 'The id of the collaborator responsible for the transaction'
          type: integer
          nullable: false
        created_at:
          description: 'The timestamp of the entry'
          type: string
          format: date-time
          nullable: false
      type: object
    Store:
      required:
        - id
        - name
      properties:
        id:
          description: 'The ID of the store'
          type: integer
          nullable: false
        name:
          description: 'The name of the store'
          type: string
          nullable: false
      type: object
    User:
      required:
        - id
        - name
        - email
      properties:
        id:
          description: 'The ID of the user'
          type: integer
          nullable: false
        name:
          description: 'The name of the user'
          type: string
          nullable: false
        email:
          description: 'The email address of the user'
          type: string
          format: email
          nullable: false
        addresses:
          description: 'The addresses linked to the user'
          type: array
          items:
            $ref: '#/components/schemas/Address'
          nullable: false
      type: object
    Error:
      required:
        - message
      properties:
        message:
          description: 'A message describing the error'
          type: string
          nullable: false
        errors:
          description: 'A list of validation errors'
          type: object
          nullable: false
      type: object
    CardReleasePaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CardRelease'
          type: object
    CategoryPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Category'
          type: object
    EventPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          type: object
    GiftCardPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GiftCard'
          type: object
    OrderPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Order'
          type: object
    PaginatedCollection:
      required:
        - data
        - links
        - meta
      properties:
        links:
          required:
            - first
            - last
            - prev
            - next
          properties:
            first:
              type: string
              nullable: false
            last:
              type: string
              nullable: false
            prev:
              type: string
              nullable: true
            next:
              type: string
              nullable: true
          type: object
        meta:
          required:
            - current_page
            - last_page
            - from
            - to
            - per_page
            - total
            - links
            - path
          properties:
            current_page:
              type: integer
              nullable: false
            last_page:
              type: integer
              nullable: false
            from:
              type: integer
              nullable: false
            to:
              type: integer
              nullable: false
            per_page:
              type: integer
              nullable: false
            total:
              type: integer
              nullable: false
            links:
              type: array
              items:
                required:
                  - url
                  - label
                  - active
                properties:
                  url: { type: string, nullable: true }
                  label: { type: string, nullable: false }
                  active: { type: boolean, nullable: false }
                type: object
              nullable: false
            path:
              type: string
              nullable: false
          type: object
      type: object
    ProductPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Product'
          type: object
    RegistrationPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Registration'
          type: object
    StockPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Stock'
          type: object
    StoreCreditHistoryPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StoreCreditHistory'
          type: object
    StorePaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Store'
          type: object
    UserPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
          type: object
  requestBodies:
    AddressCreateRequest:
      description: 'Request body for creating or updating an address'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressEditInput'
    TokenRequest:
      description: 'Request body for creating a JWT token'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenCreateInput'
    CategoryCreateRequest:
      description: 'Request body for creating a category'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryCreateInput'
    CategoryUpdateRequest:
      description: 'Request body for updating a category'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryUpdateInput'
    EventCreateRequest:
      description: 'Request body for creating or updating an event'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventEditInput'
    GiftCardCreateRequest:
      description: 'Request body for creating a gift card'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiftCardCreateInput'
    GiftCardUpdateRequest:
      description: 'Request body for updating a gift card'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GiftCardUpdateInput'
    OrderCreateRequest:
      description: 'Request body for creating an order'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderCreateInput'
    OrderUpdateRequest:
      description: 'Request body for updating an order'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderUpdateInput'
    OrderItemCreateRequest:
      description: 'Request body for creating or updating an order item'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderItemEditInput'
    ProductCreateRequest:
      description: 'Request body for creating or updating a product'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductEditInput'
    RegistrationCreateRequest:
      description: 'Request body for creating a registration'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistrationCreateInput'
    RegistrationUpdateRequest:
      description: 'Request body for updating a registration'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistrationUpdateInput'
    StockCreateRequest:
      description: 'Request body for creating a stock'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderCreateInput'
    StockUpdateRequest:
      description: 'Request body for updating a stock'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StockUpdateInput'
    StockItemCreateRequest:
      description: 'Request body for creating or updating a stock item'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StockItemEditInput'
    StoreCreateRequest:
      description: 'Request body for creating or updating a store'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StoreEditInput'
tags:
  -
    name: Address
    description: Address
  -
    name: Auth
    description: Auth
  -
    name: 'Card Release'
    description: 'Card Release'
  -
    name: Category
    description: Category
  -
    name: Event
    description: Event
  -
    name: 'Gift Card'
    description: 'Gift Card'
  -
    name: Order
    description: Order
  -
    name: 'Order Item'
    description: 'Order Item'
  -
    name: Product
    description: Product
  -
    name: Registration
    description: Registration
  -
    name: Stock
    description: Stock
  -
    name: 'Stock Item'
    description: 'Stock Item'
  -
    name: Store
    description: Store
  -
    name: 'Store Credit History'
    description: 'Store Credit History'
  -
    name: User
    description: User
